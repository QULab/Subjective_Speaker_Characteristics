cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
mydata_factors$speaker_gender
# merging dfs
mydata_factors <- merge(fs_vd,
data_raw[data_raw$listener_pseudonym == data_raw$listener_pseudonym[1] , 6:15],
by = 'speaker_pseudonym')
head(mydata_factors)
# function in utils_R
source('../../utils_R/getsigcode.R')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = './')
knitr::opts_chunk$set(fig.width=5, fig.height=5, dpi=150)
# clear
rm(list=ls())
# Libraries needed:
library(RCurl) # to read raw data from repo
library(stringi) # install.packages('stringi')
library(stats) # for wilcox.test
setwd("D:/Users/fernandez.laura/Documents/Work/Projects_Github/Subjective_Speaker_Characteristics/analysis/relationships_SC_VD")
path_github <- "https://raw.githubusercontent.com/laufergall/Subjective_Speaker_Characteristics/master/data/subjective_ratings"
data_raw <- read.csv(text=getURL(paste0(path_github,"/VD_ratings.csv")), header=TRUE, sep=",")
path_factorscores <- '../../data/generated_data'
fs_m <- read.csv(paste0(path_factorscores,'/factorscores_VD_malespk.csv'))
names(fs_m) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_f <- read.csv(paste0(path_factorscores,'/factorscores_VD_femalespk.csv'))
names(fs_f) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_vd <- rbind(fs_m, fs_f) # join male and female speakers
fs_vd$speaker_pseudonym <- stri_sub(fs_vd$sample_heard,6,-14)
fs_vd<-fs_vd[,-1] # remove "sample_heard"
# merging dfs
mydata_factors <- merge(fs_vd,
data_raw[data_raw$listener_pseudonym == data_raw$listener_pseudonym[1] , 6:15],
by = 'speaker_pseudonym')
head(mydata_factors)
# function in utils_R
source('../../utils_R/getsigcode.R')
getwd()
# function in utils_R
source('../utils_R/getsigcode.R')
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='m',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='m',]
for (i in c(1:4)){ # for each VD factor
a <- l[,9+i]
b <- h[,9+i]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='w',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='w',]
for (i in c(1:4)){ # for each VD factor
a <- l[,9+i]
b <- h[,9+i]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
## "Voice descriptions of extreme benevolent-attractive speakers"
## Factor analysis
# Laura FernÃ¡ndez Gallardo, PhD
# August 2017
# 01 -> 02 : I perform Wilkonxon tests instead of t-test
# clear, paths, libraries
rm(list=ls())
path_R='D:/Users/fernandez.laura/Documents/Work/WP4_WP5_HumanPerceptions/5-voicedescriptions/R'
path_Figures='D:/Users/fernandez.laura/Documents/Work/WP4_WP5_HumanPerceptions/5-voicedescriptions/Figures'
path_scores <-'D:/Users/fernandez.laura/Documents/Work/WP6_WP7_ML/1-SpkCharac_ML/data/factorscores'
library(stringi) # install.packages('stringi')
library(ggplot2) # install.packages('ggplot2')
library(stats)
source('~/Work/utils/R/getsigcode.R')
## Load eclipse listening test raw data
eclipse <- read.csv(paste0(path_R,'/data_eclipse.csv'))
eclipse$spk_pseudonym <- stri_sub(eclipse$filename,6,-8)
## Load factor scores and spk classes and merge
# Load factor scores of speaker attributions and speaker class
extremes <- read.csv(paste0(path_scores,'/extreme_speakers.csv'))
names(extremes)[2:6]<-c("dim1_SC", "dim2_SC", "dim3_SC", "dim4_SC", "dim5_SC") # speaker attribution dimensions
extremes<-extremes[,-1] # remove "sample_heard"
# Load factor scores of voice descriptions calculated in factor_analysis_01.R
fs_m <- read.csv(paste0(path_R,'/factorscores_voicedescriptions_malespk.csv'))
names(fs_m) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_f <- read.csv(paste0(path_R,'/factorscores_voicedescriptions_femalespk.csv'))
names(fs_f) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_vd <- rbind(fs_m, fs_f) # join male and female speakers
fs_vd$spk_pseudonym <- stri_sub(fs_vd$sample_heard,6,-8)
fs_vd<-fs_vd[,-1] # remove "sample_heard"
# merge dataframes
mydata_factors <- merge(extremes,fs_vd, by = 'spk_pseudonym')
head(mydata_factors)
mydata_items <- merge(extremes[,6:9],eclipse, by = 'spk_pseudonym')
head(mydata_items)
## NEW
## Wilkoxon test with the factors. Effect of speaker class on factor value?
## average across listeners
## for male speakers only
l <- mydata_factors[mydata_factors$class=='low' & mydata_factors$spk_gender=='m',]
h <- mydata_factors[mydata_factors$class=='high' & mydata_factors$spk_gender=='m',]
h
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = './')
knitr::opts_chunk$set(fig.width=5, fig.height=5, dpi=150)
# clear
rm(list=ls())
# Libraries needed:
library(RCurl) # to read raw data from repo
library(stringi) # install.packages('stringi')
library(stats) # for wilcox.test
setwd("D:/Users/fernandez.laura/Documents/Work/Projects_Github/Subjective_Speaker_Characteristics/analysis/relationships_SC_VD")
path_github <- "https://raw.githubusercontent.com/laufergall/Subjective_Speaker_Characteristics/master/data/subjective_ratings"
data_raw <- read.csv(text=getURL(paste0(path_github,"/VD_ratings.csv")), header=TRUE, sep=",")
path_factorscores <- '../../data/generated_data'
fs_m <- read.csv(paste0(path_factorscores,'/factorscores_VD_malespk.csv'))
names(fs_m) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_f <- read.csv(paste0(path_factorscores,'/factorscores_VD_femalespk.csv'))
names(fs_f) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_vd <- rbind(fs_m, fs_f) # join male and female speakers
fs_vd$speaker_pseudonym <- stri_sub(fs_vd$sample_heard,6,-14)
fs_vd<-fs_vd[,-1] # remove "sample_heard"
# merging dfs
mydata_factors <- merge(fs_vd,
data_raw[data_raw$listener_pseudonym == data_raw$listener_pseudonym[1] , 6:15],
by = 'speaker_pseudonym')
head(mydata_factors)
# function in utils_R
source('../utils_R/getsigcode.R')
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='m',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='m',]
for (i in c(1:4)){ # for each VD factor
a <- l[,9+i]
b <- h[,9+i]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='w',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='w',]
for (i in c(1:4)){ # for each VD factor
a <- l[,9+i]
b <- h[,9+i]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='m',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='m',]
h
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='m',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='m',]
for (i in c(1:4)){ # for each VD factor
a <- l[,i+1]
b <- h[,i+1]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = './')
knitr::opts_chunk$set(fig.width=5, fig.height=5, dpi=150)
# clear
rm(list=ls())
# Libraries needed:
library(RCurl) # to read raw data from repo
library(stringi) # install.packages('stringi')
library(stats) # for wilcox.test
setwd("D:/Users/fernandez.laura/Documents/Work/Projects_Github/Subjective_Speaker_Characteristics/analysis/relationships_SC_VD")
path_github <- "https://raw.githubusercontent.com/laufergall/Subjective_Speaker_Characteristics/master/data/subjective_ratings"
data_raw <- read.csv(text=getURL(paste0(path_github,"/VD_ratings.csv")), header=TRUE, sep=",")
path_factorscores <- '../../data/generated_data'
fs_m <- read.csv(paste0(path_factorscores,'/factorscores_VD_malespk.csv'))
names(fs_m) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_f <- read.csv(paste0(path_factorscores,'/factorscores_VD_femalespk.csv'))
names(fs_f) <- c("sample_heard", "dim1_vd","dim2_vd","dim3_vd","dim4_vd" ) # voice description dimensions
fs_vd <- rbind(fs_m, fs_f) # join male and female speakers
fs_vd$speaker_pseudonym <- stri_sub(fs_vd$sample_heard,6,-14)
fs_vd<-fs_vd[,-1] # remove "sample_heard"
# merging dfs
mydata_factors <- merge(fs_vd,
data_raw[data_raw$listener_pseudonym == data_raw$listener_pseudonym[1] , 6:15],
by = 'speaker_pseudonym')
head(mydata_factors)
# function in utils_R
source('../utils_R/getsigcode.R')
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='m',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='m',]
for (i in c(1:4)){ # for each VD factor
a <- l[,i+1]
b <- h[,i+1]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='w',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='w',]
for (i in c(1:4)){ # for each VD factor
a <- l[,i+1]
b <- h[,i+1]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='m',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='m',]
for (i in c(1:4)){ # for each VD factor
a <- l[,i+1]
b <- h[,i+1]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[9+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
# separate high and low WAAT speakers
l <- mydata_factors[mydata_factors$speaker_highlow_SC=='low' & mydata_factors$speaker_gender=='m',]
h <- mydata_factors[mydata_factors$speaker_highlow_SC=='high' & mydata_factors$speaker_gender=='m',]
for (i in c(1:4)){ # for each VD factor
a <- l[,i+1]
b <- h[,i+1]
#---wilcox.test
# Wilcoxon rank-sum test -> equivalent to the Mann-Whitney test
# paired: each subject or entity is measured twice, resulting in pairs of observations <- this is not our case
wtest <- wilcox.test(a, b, paired=FALSE)
cat(paste0(names(mydata_factors)[1+i], ': ', ", p-val: ", round(wtest$p.value,4),getsigcode(wtest$p.value), '   mean low=',round(mean(a),3),', mean high=',round(mean(b),3),'\n'))
}
knitr::opts_chunk$set(echo = TRUE)
# setting paths and loading data
setwd("D:/Users/fernandez.laura/Documents/Work/Projects_Github/Subjective_Speaker_Characteristics/analysis/relationships_SC_VD")
path_github <- "https://raw.githubusercontent.com/laufergall/Subjective_Speaker_Characteristics/master/data/subjective_ratings"
sc <- read.csv(text=getURL(paste0(path_github,"/SC_ratings.csv")), header=TRUE, sep=",")
vd <- read.csv(text=getURL(paste0(path_github,"/VD_ratings.csv")), header=TRUE, sep=",")
fit.linearmodels <- function(sc_sub, vd_sub){
# Our descriptors: VD ratings (from 0 to 100). Aggregate by speaker ID
desc <- aggregate(vd_sub[,c(8:41)], by = list(vd_sub$speaker_ID),mean)
desc <- desc[,-1]
# Center and scale descriptors
# desc <- as.data.frame(lapply(desc, scale))
# Out targets:  mean rating across listeners for each of the 34 SC
all.targets <- aggregate(sc_sub[,10:(10+33)], by = list(sc_sub$speaker_ID),mean, na.rm=T)
all.targets <- all.targets[,-1]
set.seed(2302)
options(digits=2)
all.lm <- lapply(all.targets, function(x){
# finding the best descriptors (Model selection)
result.regsubsets <- leaps::regsubsets(desc,x)
# we select the model with 2 descriptors
selmodel <- summary(result.regsubsets)$which[2,]
desc.selmodel <- names(selmodel[which(selmodel==TRUE)])[2:3]
# fit the selected model and retrieve models' coefficients, descriptiors, r-squared, p-value of F-statistic
fit <- lm(x ~ desc[,desc.selmodel[1]] + desc[,desc.selmodel[2]])
f <- summary(fit)$fstatistic
tmp <- coef(fit)
tmp["r.squared"] <- summary(fit)$r.squared
tmp["p.value"] <- pf(f[1],f[2],f[3],lower.tail=F)
# build lm equation
# rounded coefficients for better output
cf <- round(coef(fit), 2)
# sign check to avoid having plus followed by minus for negative coefficients
tmp["eq"] <- paste(cf[1],
ifelse(sign(cf[2])==1, "+", "-"), abs(cf[2]), desc.selmodel[1],
ifelse(sign(cf[3])==1, "+", "-"), abs(cf[3]), desc.selmodel[2])
return(tmp)
})
return(all.lm)
}
# Select male speakers from dataframes SC and VD
sc_sub <- sc[sc$speaker_gender=='male',]
vd_sub <- vd[vd$speaker_gender=='m',]
# call our function and view the models' coefficients, r-squared and p-value of F-statistic
all.lm_males <- fit.linearmodels(sc_sub, vd_sub)
cbind(names(vd))
cbind(names(sc))
fit.linearmodels <- function(sc_sub, vd_sub){
# Our descriptors: VD ratings (from 0 to 100). Aggregate by speaker ID
desc <- aggregate(vd_sub[,c(16:(16+33))], by = list(vd_sub$speaker_ID),mean)
desc <- desc[,-1]
# Center and scale descriptors
# desc <- as.data.frame(lapply(desc, scale))
# Out targets:  mean rating across listeners for each of the 34 SC
all.targets <- aggregate(sc_sub[,10:(10+33)], by = list(sc_sub$speaker_ID),mean, na.rm=T)
all.targets <- all.targets[,-1]
set.seed(2302)
options(digits=2)
all.lm <- lapply(all.targets, function(x){
# finding the best descriptors (Model selection)
result.regsubsets <- leaps::regsubsets(desc,x)
# we select the model with 2 descriptors
selmodel <- summary(result.regsubsets)$which[2,]
desc.selmodel <- names(selmodel[which(selmodel==TRUE)])[2:3]
# fit the selected model and retrieve models' coefficients, descriptiors, r-squared, p-value of F-statistic
fit <- lm(x ~ desc[,desc.selmodel[1]] + desc[,desc.selmodel[2]])
f <- summary(fit)$fstatistic
tmp <- coef(fit)
tmp["r.squared"] <- summary(fit)$r.squared
tmp["p.value"] <- pf(f[1],f[2],f[3],lower.tail=F)
# build lm equation
# rounded coefficients for better output
cf <- round(coef(fit), 2)
# sign check to avoid having plus followed by minus for negative coefficients
tmp["eq"] <- paste(cf[1],
ifelse(sign(cf[2])==1, "+", "-"), abs(cf[2]), desc.selmodel[1],
ifelse(sign(cf[3])==1, "+", "-"), abs(cf[3]), desc.selmodel[2])
return(tmp)
})
return(all.lm)
}
# Select male speakers from dataframes SC and VD
sc_sub <- sc[sc$speaker_gender=='male',]
vd_sub <- vd[vd$speaker_gender=='m',]
# call our function and view the models' coefficients, r-squared and p-value of F-statistic
all.lm_males <- fit.linearmodels(sc_sub, vd_sub)
sc_sub = sc
vd_sub = vd
desc <- aggregate(vd_sub[,c(16:(16+33))], by = list(vd_sub$speaker_ID),mean)
desc <- desc[,-1]
# Center and scale descriptors
# desc <- as.data.frame(lapply(desc, scale))
# Out targets:  mean rating across listeners for each of the 34 SC
all.targets <- aggregate(sc_sub[,10:(10+33)], by = list(sc_sub$speaker_ID),mean, na.rm=T)
all.targets <- all.targets[,-1]
all.targets
desc
x = all.targets[1]
x
leaps::regsubsets(desc,x)
sc$speaker_gender
vd$speaker_gender
??leaps::regsubsets
head(sc_sub)
head(vd_sub)
head(desc)
knitr::opts_chunk$set(echo = TRUE)
# clear
rm(list=ls())
# setting paths and loading data
path_R <- "D:/Users/fernandez.laura/Documents/Work/WP6_WP7_ML/2-VoiceDesc_ML/R"
sc <- read.csv(paste0(path_R,'/data_SC.csv'))
vd <- read.csv(paste0(path_R,'/data_VD.csv'))
# Libraries needed:
library(leaps) # for feature selection
library(knitr) # for kable
fit.linearmodels <- function(sc_sub, vd_sub){
# Our descriptors: VD ratings (from 0 to 100). Aggregate by speaker ID
desc <- aggregate(vd_sub[,c(8:41)], by = list(vd_sub$speaker_ID),mean)
desc <- desc[,-1]
# Center and scale descriptors
# desc <- as.data.frame(lapply(desc, scale))
# Out targets:  mean rating across listeners for each of the 34 SC
all.targets <- aggregate(sc_sub[,10:(10+33)], by = list(sc_sub$speaker_ID),mean, na.rm=T)
all.targets <- all.targets[,-1]
set.seed(2302)
options(digits=2)
all.lm <- lapply(all.targets, function(x){
# finding the best descriptors (Model selection)
result.regsubsets <- leaps::regsubsets(desc,x)
# we select the model with 2 descriptors
selmodel <- summary(result.regsubsets)$which[2,]
desc.selmodel <- names(selmodel[which(selmodel==TRUE)])[2:3]
# fit the selected model and retrieve models' coefficients, descriptiors, r-squared, p-value of F-statistic
fit <- lm(x ~ desc[,desc.selmodel[1]] + desc[,desc.selmodel[2]])
f <- summary(fit)$fstatistic
tmp <- coef(fit)
tmp["r.squared"] <- summary(fit)$r.squared
tmp["p.value"] <- pf(f[1],f[2],f[3],lower.tail=F)
# build lm equation
# rounded coefficients for better output
cf <- round(coef(fit), 2)
# sign check to avoid having plus followed by minus for negative coefficients
tmp["eq"] <- paste(cf[1],
ifelse(sign(cf[2])==1, "+", "-"), abs(cf[2]), desc.selmodel[1],
ifelse(sign(cf[3])==1, "+", "-"), abs(cf[3]), desc.selmodel[2])
return(tmp)
})
return(all.lm)
}
# Select male speakers from dataframes SC and VD
sc_sub <- sc[sc$speaker_gender=='male',]
vd_sub <- vd[vd$speaker_gender=='m',]
# call our function and view the models' coefficients, r-squared and p-value of F-statistic
all.lm_males <- fit.linearmodels(sc_sub, vd_sub)
# create dataframe with the output of each model
all.lm_males <- data.frame(t(as.data.frame(all.lm_males)))
# view table
all.lm_males$r.squared <- as.numeric(as.matrix(all.lm_males$r.squared))
kable(all.lm_males[order(all.lm_males$r.squared, decreasing = T), c(6,4)])
# Select male speakers from dataframes SC and VD
sc_sub <- sc[sc$speaker_gender=='female',]
vd_sub <- vd[vd$speaker_gender=='w',]
# call our function and view the models' coefficients, r-squared and p-value of F-statistic
all.lm_females <- fit.linearmodels(sc_sub, vd_sub)
# create dataframe with the output of each model
all.lm_females <- data.frame(t(as.data.frame(all.lm_females)))
# view table
all.lm_females$r.squared <- as.numeric(as.matrix(all.lm_females$r.squared))
kable(all.lm_females[order(all.lm_females$r.squared, decreasing = T), c(6,4)])
# save models for males and females to check later items affected by BW
all.lm_males$item <- rownames(all.lm_males)
rownames(all.lm_males)<- NULL
all.lm_females$item <- rownames(all.lm_females)
rownames(all.lm_females)<- NULL
save(all.lm_males, file = paste0(path_R,'/all_lm_males.RData'))
save(all.lm_females, file = paste0(path_R,'/all_lm_females.RData'))
hevd
vd
vd_sub= vd
sc_sub= sc
desc <- aggregate(vd_sub[,c(8:41)], by = list(vd_sub$speaker_ID),mean)
desc <- desc[,-1]
# Center and scale descriptors
# desc <- as.data.frame(lapply(desc, scale))
# Out targets:  mean rating across listeners for each of the 34 SC
all.targets <- aggregate(sc_sub[,10:(10+33)], by = list(sc_sub$speaker_ID),mean, na.rm=T)
all.targets <- all.targets[,-1]
x = all.targets[1]
unique(sc$speaker_pseudonym)
knitr::opts_chunk$set(echo = TRUE)
# clear
rm(list=ls())
# Libraries needed:
library(leaps) # for feature selection
library(knitr) # for kable
# setting paths and loading data
setwd("D:/Users/fernandez.laura/Documents/Work/Projects_Github/Subjective_Speaker_Characteristics/analysis/relationships_SC_VD")
path_github <- "https://raw.githubusercontent.com/laufergall/Subjective_Speaker_Characteristics/master/data/subjective_ratings"
sc <- read.csv(text=getURL(paste0(path_github,"/SC_ratings.csv")), header=TRUE, sep=",")
# Libraries needed:
library(RCurl) # to read raw data from repo
library(leaps) # for feature selection
library(knitr) # for kable
# setting paths and loading data
setwd("D:/Users/fernandez.laura/Documents/Work/Projects_Github/Subjective_Speaker_Characteristics/analysis/relationships_SC_VD")
path_github <- "https://raw.githubusercontent.com/laufergall/Subjective_Speaker_Characteristics/master/data/subjective_ratings"
sc <- read.csv(text=getURL(paste0(path_github,"/SC_ratings.csv")), header=TRUE, sep=",")
vd <- read.csv(text=getURL(paste0(path_github,"/VD_ratings.csv")), header=TRUE, sep=",")
head(sc)
sc <- sc[sc$speaker_ID %in% unique(vd$speaker_ID),]
fit.linearmodels <- function(sc_sub, vd_sub){
# Our descriptors: VD ratings (from 0 to 100). Aggregate by speaker ID
desc <- aggregate(vd_sub[,c(16:(16+33))], by = list(vd_sub$speaker_ID),mean)
desc <- desc[,-1]
# Center and scale descriptors
# desc <- as.data.frame(lapply(desc, scale))
# Out targets:  mean rating across listeners for each of the 34 SC
all.targets <- aggregate(sc_sub[,10:(10+33)], by = list(sc_sub$speaker_ID),mean, na.rm=T)
all.targets <- all.targets[,-1]
set.seed(2302)
options(digits=2)
all.lm <- lapply(all.targets, function(x){
# finding the best descriptors (model selection)
result.regsubsets <- leaps::regsubsets(desc,x)
# we select the model with 2 descriptors
selmodel <- summary(result.regsubsets)$which[2,]
desc.selmodel <- names(selmodel[which(selmodel==TRUE)])[2:3]
# fit the selected model and retrieve models' coefficients, descriptiors, r-squared, p-value of F-statistic
fit <- lm(x ~ desc[,desc.selmodel[1]] + desc[,desc.selmodel[2]])
f <- summary(fit)$fstatistic
tmp <- coef(fit)
tmp["r.squared"] <- summary(fit)$r.squared
tmp["p.value"] <- pf(f[1],f[2],f[3],lower.tail=F)
# build lm equation
# rounded coefficients for better output
cf <- round(coef(fit), 2)
# sign check to avoid having plus followed by minus for negative coefficients
tmp["eq"] <- paste(cf[1],
ifelse(sign(cf[2])==1, "+", "-"), abs(cf[2]), desc.selmodel[1],
ifelse(sign(cf[3])==1, "+", "-"), abs(cf[3]), desc.selmodel[2])
return(tmp)
})
return(all.lm)
}
# Select male speakers from dataframes SC and VD
sc_sub <- sc[sc$speaker_gender=='male',]
vd_sub <- vd[vd$speaker_gender=='m',]
# call our function and view the models' coefficients, r-squared and p-value of F-statistic
all.lm_males <- fit.linearmodels(sc_sub, vd_sub)
# create dataframe with the output of each model
all.lm_males <- data.frame(t(as.data.frame(all.lm_males)))
# view table
all.lm_males$r.squared <- as.numeric(as.matrix(all.lm_males$r.squared))
kable(all.lm_males[order(all.lm_males$r.squared, decreasing = T), c(6,4)])
# Select male speakers from dataframes SC and VD
sc_sub <- sc[sc$speaker_gender=='female',]
vd_sub <- vd[vd$speaker_gender=='w',]
# call our function and view the models' coefficients, r-squared and p-value of F-statistic
all.lm_females <- fit.linearmodels(sc_sub, vd_sub)
# create dataframe with the output of each model
all.lm_females <- data.frame(t(as.data.frame(all.lm_females)))
# view table
all.lm_females$r.squared <- as.numeric(as.matrix(all.lm_females$r.squared))
kable(all.lm_females[order(all.lm_females$r.squared, decreasing = T), c(6,4)])
